#!/usr/bin/env bash
print_usage () {
  # Print usage
  echo -n 'Error! wrong number of arguments'
  echo " [$#]"
  echo 'usage:'
  echo "$0 CENTER_LETTER PETAL_LETTERS"
  echo 'e.g.'
  echo "$0 e sombody"
  echo "You can also specify the bonus letter last i.e."
  echo "$0 e sombody m"
  exit 1
}
if [[ $# -lt 2 || $# -gt 3 ]]; then
  print_usage $@
fi
CENTER_LETTER=$1
PETAL_LETTERS=$2
if [[ $# -eq 3 ]]; then
  BONUS_LETTER=$3
fi
ALL_LETTERS="$CENTER_LETTER$PETAL_LETTERS"
grep1="[$PETAL_LETTERS]"
grep2="[^$ALL_LETTERS]"
is_pangram=0
TMP=$(mktemp -d)
: ${BLOSSOM_CACHE:="/tmp/blossom_cache"}
if [[ ! -d $BLOSSOM_CACHE ]]; then
  set -e
  mkdir -p $BLOSSOM_CACHE
  set +e
fi

trap "rm -rf $TMP" EXIT
: ${DICTIONARY:="/usr/share/dict/american-english"}
if [[ ! -f $DICTIONARY ]]; then
  echo "Dictionary file not found at $DICTIONARY"
  echo "You can specify a path to the dictionary like this:"
  echo "DICTIONARY=/path/to/english/dictionary $0 CENTER_LETTER PETAL_LETTERS"
  exit 1
fi

pangram () {
  TARGET=$1
  is_pangram=0
  found_letters=0
	for (( i=0; i<${#ALL_LETTERS}; i++ )); do
		CURRENT_LETTER="${ALL_LETTERS:$i:1}"
    seddr="s/[^${CURRENT_LETTER}]//ig"
    res=$(echo $TARGET |sed "$seddr")
    if [[ "${#res}" -gt 0 ]]; then
      ((++found_letters))
    fi
	done
  if [[ "$found_letters" -eq "${#ALL_LETTERS}" ]]; then
    is_pangram=1
  fi
}

filter_down () {
  if [[ -f "${BLOSSOM_CACHE}/${ALL_LETTERS}.txt" ]]; then
    cp ${BLOSSOM_CACHE}/${ALL_LETTERS}.txt $TMP/sorted
  else
    grep $CENTER_LETTER $DICTIONARY \
    |grep -P $grep1 \
    |grep -v -P $grep2 \
    |grep -v -P '^/S$' \
    |grep -v -P '^\S\S$' \
    |grep -v -P '^\S\S\S$' \
    |sort > $TMP/sorted
    cp $TMP/sorted ${BLOSSOM_CACHE}/${ALL_LETTERS}.txt
  fi
  
  if [[ -z $BONUS_LETTER ]]; then
    mv $TMP/sorted $TMP/filter_down
  else
    grep $BONUS_LETTER $TMP/sorted > $TMP/filter_down
    rm $TMP/sorted
  fi
}

main () {
  if [[ $# -eq 1 ]]; then
    BONUS_LETTER=$1
  fi
  filter_down
  file="$TMP/filter_down"
  for i in `seq $(cat $file|wc -l)`
  do
    line="`head -n$i $file|tail -n1`"
    linesize=`echo "$line"|wc -c `
    if [[ $linesize -lt  4 ]]; then
      size_score=0
    elif [[ $linesize -eq  4 ]]; then
      size_score=2
    elif [[ $linesize -eq  5 ]]; then
      size_score=4
    elif [[ $linesize -eq  6 ]]; then
      size_score=6
    elif [[ $linesize -eq  6 ]]; then
      size_score=6
    elif [[ $linesize -eq  7 ]]; then
      size_score=12
    elif [[ $linesize -gt  7 ]]; then
      size_score=12
      count=$(($linesize - 8))
      while [[ $count -gt 0 ]]; do
        ((size_score+=3))
        ((count--))
      done
    fi
    pangram "$line"
    if [[ $is_pangram -eq 1 ]]; then
        pangram_score=7
        #((score + 7))
        is_pangram=0
        line=${line}_PANGRAM
    else
        pangram_score=0
    fi

		if [[ -z $BONUS_LETTER ]]; then
      echo no bonus letter
      exit 1
      bonus_score=0
      score=$((size_score + pangram_score))
      score_breakdown=$(printf 'size_score(%2d) %2d + pangram_score %2d' $linesize $size_score $pangram_score)
      echo -e "$score\t$score_breakdown\t$line" >> $TMP/sized
		else
			res="${line//[^$BONUS_LETTER]}"
			bonus_num="${#res}"
      bonus_multiplier=5
      bonus_score=$((bonus_num * bonus_multiplier))
      score=$((size_score + bonus_score + pangram_score))
      #score_breakdown=$(printf 'size_score(%2d) %2d + bonus_score(%2d) %2d + pangram_score %2d' $linesize $size_score $bonus_num $bonus_score "$BONUS_LETTER" $pangram_score)
      score_breakdown=$(printf 'size_score(%2d) %2d + bonus_score(%2d) %2d + pangram_score %2d' $linesize $size_score $bonus_num $bonus_score $pangram_score)
      echo -e "$score\t$score_breakdown\t$line" >> $TMP/sized
		fi
  done
  #sort -n $TMP/sized | awk '{print $1 $}'
  sort -n $TMP/sized
}

if [[ -z $BONUS_LETTER ]]; then
	for (( i=0; i<${#PETAL_LETTERS}; i++ )); do
		export BONUS_LETTER="${PETAL_LETTERS:$i:1}"
		if [[ -z $BONUS_LETTER ]]; then
      echo no bonus letter
      exit 1
		else
      main $BONUS_LETTER >> $TMP/conglomerated
    fi
	done
  sort -n $TMP/conglomerated
else
  main
fi
